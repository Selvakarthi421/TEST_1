#include "main.h"
#include "uart_header.h"
uint8_t TX_buffer[20] = "HELLO_";
uint8_t n[] = "\r\n";
uint8_t rx[2];

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart3;
TIM_HandleTypeDef htim2;

/* Function Prototypes -----------------------------------------------------*/
void SystemClock_Config(void);
void MX_GPIO_Init(void);
void MX_USART3_UART_Init(void);
void MX_TIM2_Init(void);
void TIM2_IRQHandler(void);  // Timer interrupt handler

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  HAL_Init();  // Initialize the HAL library

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART3_UART_Init();
  MX_TIM2_Init();  // Initialize Timer 2

  /* Start Timer */
  HAL_TIM_Base_Start_IT(&htim2);  // Start Timer 2 with interrupt

  /* Infinite loop */
  while (1)
  {
    HAL_UART_Transmit(&huart3, TX_buffer, sizeof(TX_buffer), 500);
    HAL_UART_Transmit(&huart3, n, sizeof(n), 500);
    HAL_Delay(2000);

    if (HAL_UART_Receive(&huart3, rx, sizeof(rx), 10) == HAL_OK)
    {
      if (rx[0] == 'H' && rx[1] == 'I')
      {
        uint8_t message[] = "Received HI Exiting...\r\n";
        HAL_UART_Transmit(&huart3, message, sizeof(message), 5);
        break;
      }
    }
  }

  while(1) {}
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief Timer 2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 7999;  // Prescaler for 10kHz timer clock (80MHz / 8000 = 10kHz)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 999;  // Period for 1 second delay (10kHz / 1000 = 1Hz)
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }

  /* Enable the Timer Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);  // Enable interrupt for TIM2
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  __HAL_RCC_GPIOA_CLK_ENABLE();  // Enable GPIOA clock

  /* Configure GPIO pin : PA5 (LED Pin) */
  GPIO_InitStruct.Pin = GPIO_PIN_5;  // Pin 5 (LED pin)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  // Push-pull mode
  GPIO_InitStruct.Pull = GPIO_NOPULL;  // No pull-up or pull-down
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;  // Low speed
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

/**
  * @brief Timer 2 Interrupt Handler
  * @retval None
  */
void TIM2_IRQHandler(void)
{
  if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE))
  {
    __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);  // Clear the update flag

    // Toggle the LED on PA5 every second
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  }
}

void Error_Handler(void)
{
  __disable_irq();
  while (1)
  {
    // Stay here in case of error
  }
}

