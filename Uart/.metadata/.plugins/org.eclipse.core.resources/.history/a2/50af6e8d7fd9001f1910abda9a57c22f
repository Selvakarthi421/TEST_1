/*
 * Timer.c
 *
 *  Created on: Jan 23, 2025
 *      Author: ADMIN
 */
#include "Timer_header.h"
#include "stm32l4xx_hal.h"
HAL_TIM_base_Start_IT(&htim2);
void timer(void){

	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypedef *htim){
		if (htim->Instance == TIM2)
		    {

		        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_SET)
		        {
		            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
		        }
		        else
		        {

		            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
		        }
	}
}
}
void Timer_Init(void)
{
    // Enable clock for TIM2
    __HAL_RCC_TIM2_CLK_ENABLE();

    htim2.Instance = TIM2;
    htim2.Init.Prescaler = 15999;  // 16 MHz / 16000 = 1kHz (1ms tick)
    htim2.Init.Period = 999;       // 1 second delay (1000ms)
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

    // Initialize the timer
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
    {
        // Error handling
        Error_Handler();
    }

    // Start the timer in interrupt mode
    HAL_TIM_Base_Start_IT(&htim2);
}

// Main initialization for GPIO (PC5 as output and PC8 as input)
void GPIO_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    // Enable clocks for GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();

    // Configure PC5 as output for the LED
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    // Configure PC8 as input (for the trigger)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
}

